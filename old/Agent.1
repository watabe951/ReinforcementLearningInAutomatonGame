import java.io.*;
import java.util.*;
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Agent_old {
    int[][] state;
    int[][] next_state;
    int action;
    int next_action;
    int life;
    int prev_life;
    double reward;
    Map<int[][], Double[]> qfunc;
    int num_action = 5;

    Cellular cellular;
    Player player;

    Agent(Cellular cellular) {
        this.cellular = cellular;
        this.qfunc = new HashMap<int[][], Double[]>();
        // for (int i = 0; i < this.cellular.xSize; i++) {
        // for (int j = 0; j < this.cellular.ySize; j++) {
        // this.state[i][j] = new Int();
        // }
        // }
    }

    void init(Player player) {
        this.state = new int[cellular.xSize][cellular.ySize];
        this.next_state = new int[cellular.xSize][cellular.ySize];
        this.player = player;

    }

    void Observe() {

        getState();

        getReward();

        if (!this.qfunc.containsKey(this.state)) {
            qfunc.put(this.state, new Double[num_action]);
        }
    }

    void getState() {
        System.out.println("getState:");
        for (int i = 0; i < this.cellular.xSize; i++) {
            for (int j = 0; j < this.cellular.ySize; j++) {
                System.out.println("read:" + i + ", " + j);

                this.state[i][j] = this.cellular.cells[i][j].state;
                System.out.println("state:" + this.cellular.cells[i][j].state);

            }
        }
        prev_life = life;
        life = this.player.life;
    }

    void getReward() {
        if (life < prev_life) {
            this.reward = -1;
        }
        if (this.cellular.gameOver) {
            this.reward = 5;
        }
    }

    void updateQFunction() {
        double lambda = 0.5;
        double alpha = 0.5;
        double maxQ = Double.MIN_VALUE;
        Double[] newQ = new Double[this.num_action];
        newQ = this.qfunc.get(this.state);
        for (int i = 0; i < this.num_action; i++) {
            if (maxQ < this.qfunc.get(this.next_state)[i]) {
                maxQ = this.qfunc.get(this.next_state)[i];
            }
        }
        double temporaldifference = reward + lambda * maxQ - this.qfunc.get(this.next_state)[action];

        newQ[action] += alpha * temporaldifference;
        this.qfunc.put(this.state, newQ);
    }

    int policy() {

        double maxQ = Double.MIN_VALUE;
        int a = 0;
        System.out.println("bbbb" + maxQ + "bbbb");
        if (!this.qfunc.containsKey(this.state)) {
            qfunc.put(this.state, new Double[num_action]);
        }
        System.out.println("bbbb" + maxQ + "bbbb");

        for (int i = 0; i < this.num_action; i++) {
            // if (maxQ < this.qfunc.get(this.state)[i]) {
            if (true) {
                System.out.println("bbbb" + maxQ + "bbbb");
                maxQ = this.qfunc.get(this.state)[i];
                a = i;

            }
        }
        if (Math.random() < 0.8) {
            return a;
        } else {
            return (int) (Math.random() * this.num_action);
        }
    }
}
